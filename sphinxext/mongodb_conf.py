import yaml

try:
    with open('mongodb-domain.yaml', 'r') as f:
        conf = yaml.safe_load_all(f).next()
except IOError:
    conf = { 'composites': [], 'suppress-prefix': [] }

conf['directives'] = [
    {
        'name': 'binary',
        'tag': 'bin',
        'description': 'program',
        'callable': False,
        'prepend': True,
    },
    {
        'name': 'program',
        'tag': 'bin',
        'description': 'program',
        'callable': False,
        'prepend': True,
    },
    {
        'name': 'dbcommand',
        'tag': 'dbcmd',
        'description': 'database command',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'expression',
        'tag': 'exp',
        'description': 'aggregation framework transformation expression',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'group',
        'tag': 'grp',
        'description': 'aggregation framework group expression',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'operator',
        'tag': 'metaOp',
        'description': 'operator',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'query',
        'tag': 'op',
        'description': 'query',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'update',
        'tag': 'up',
        'description': 'update operator',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'parameter',
        'tag': 'param',
        'description': 'setParameter option',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'pipeline',
        'tag': 'pipe',
        'description': 'aggregation framework pipeline operator',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'projection',
        'tag': 'proj',
        'description': 'projection operator',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'method',
        'tag': 'meth',
        'description': 'shell method',
        'prepend': False,
        'callable': True,
    },
    {
        'name': 'authrole',
        'tag': 'auth',
        'description': 'user role',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'authaction',
        'tag': 'authr',
        'description': 'user action',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'bsontype',
        'tag': 'bson',
        'description': 'BSON type',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'collflag',
        'tag': 'collflg',
        'description': 'collection flag',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'data',
        'tag': 'data',
        'description': 'MongoDB reporting output',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'error',
        'tag': 'err',
        'description': 'error code',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'limit',
        'tag': 'lmt',
        'description': 'MongoDB system limit',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'macro',
        'tag': 'mcr',
        'description': 'JavaScript shell macro',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'readmode',
        'tag': 'readpref',
        'description': 'read preference mode',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'setting',
        'tag': 'setting',
        'description': 'setting',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'replstate',
        'tag': 'replstate',
        'description': 'replica set state',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'variable',
        'tag': 'variable',
        'description': 'system variable available in aggregation',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'writeconcern',
        'tag': 'writeconcern',
        'description': 'write concern values',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'alert',
        'tag': 'alert',
        'description': 'system alert',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'event',
        'tag': 'event',
        'description': 'system event',
        'prepend': False,
        'callable': False,
    },
    {
        'name': 'mongod-option',
        'tag': 'mongod-option',
        'description': 'option for mongod',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongod.exe-option',
        'tag': 'mongod.exe-option',
        'description': 'option for mongod.exe',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongos-option',
        'tag': 'mongos-option',
        'description': 'option for mongos',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongos.exe-option',
        'tag': 'mongos.exe-option',
        'description': 'option for mongos.exe',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongo-option',
        'tag': 'mongo-option',
        'description': 'option for mongo shell',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongodump-option',
        'tag': 'mongodump-option',
        'description': 'option for mongodump',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongoimport-option',
        'tag': 'mongoimport-option',
        'description': 'option for mongoimport',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongoexport-option',
        'tag': 'mongoexport-option',
        'description': 'option for mongoexport',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongofiles-option',
        'tag': 'mongofiles-option',
        'description': 'option for mongofiles',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'bsondump-option',
        'tag': 'bsondump-option',
        'description': 'option for bsondump',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongodump-option',
        'tag': 'mongodump-option',
        'description': 'option for mongodump',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongorestore-option',
        'tag': 'mongorestore-option',
        'description': 'option for mongorestore',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongoperf-option',
        'tag': 'mongoperf-option',
        'description': 'option for mongoperf',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongooplog-option',
        'tag': 'mongooplog-option',
        'description': 'option for mongooplog',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongosniff-option',
        'tag': 'mongosniff-option',
        'description': 'option for mongosniff',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongostat-option',
        'tag': 'mongostat-option',
        'description': 'option for mongostat',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'mongotop-option',
        'tag': 'mongotop-option',
        'description': 'option for mongotop',
        'prepend': True,
        'callable': False,
    },

    ## Custom Setting Directives for MMS Agents
    {
        'name': 'msetting',
        'tag': 'msetting',
        'description': 'Monitoring Agent Setting',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'bsetting',
        'tag': 'bsetting',
        'description': 'Backup Agent Setting',
        'prepend': True,
        'callable': False,
    },
    {
        'name': 'asetting',
        'tag': 'asetting',
        'description': 'Automation Agent Setting',
        'prepend': True,
        'callable': False,
    },
]

conf['prepend'] = { }

for directive in conf['directives']:
    if directive['prepend']:
        conf['prepend'][directive['name']] = directive['tag']
